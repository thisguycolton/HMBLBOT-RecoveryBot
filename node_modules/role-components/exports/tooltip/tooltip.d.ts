/**
 * Due to accessibility reasons with aria-describedby, the tooltip must be the same
 *   document / shadowRoot as the item being described by the tooltip.
 * @customElement
 * @example
 *   <role-tooltip id="my-tooltip">I'm a tooltip!</role-tooltip>
 *   <button aria-describedby="my-tooltip">Button</button>
 * @slot - default slot
 * @cssprop [--background-color=#222]
 * @cssprop [--arrow-size=8px]
 */
export default class RoleTooltip extends BaseElement {
    static get properties(): {
        id: {
            reflect: boolean;
        };
        tooltipAnchors: {
            state: boolean;
        };
        rootElement: {
            state: boolean;
        };
        role: {
            reflect: boolean;
        };
        inert: {
            reflect: boolean;
            type: BooleanConstructor;
        };
        placement: {
            reflect: boolean;
        };
    };
    /** @returns {string} */
    static get baseName(): string;
    static get styles(): import("lit").CSSResult;
    /**
     * @type {Element[]}
     */
    tooltipAnchors: Element[];
    /**
     * @type {ShadowRoot | Document | undefined}
     */
    _rootElement: ShadowRoot | Document | undefined;
    role: string;
    /**
     * @type {import("@floating-ui/dom").Placement}
     */
    placement: import("@floating-ui/dom").Placement;
    /**
     * @type {Array<[keyof GlobalEventHandlersEventMap, (evt: Event | KeyboardEvent) => void]>}
     */
    listeners: [keyof GlobalEventHandlersEventMap, (evt: Event | KeyboardEvent) => void][];
    updateAnchors(): void;
    /**
     * @type {string}
     */
    get query(): string;
    /** @returns {void} */
    set rootElement(arg: Document | ShadowRoot | undefined);
    /** @returns {ShadowRoot | Document | undefined} */
    get rootElement(): Document | ShadowRoot | undefined;
    render(): import("lit").TemplateResult<1>;
    /**
     * Used for re-initialized event listeners
     * @returns {void}
     */
    attachListeners(): void;
    /**
     * Used for cleaning up
     * @returns {void}
     */
    removeListeners(): void;
    /** @returns {HTMLElement | undefined | null} */
    get arrow(): HTMLElement | null | undefined;
    /**
     * @param {Event|Element} eventOrElement
     * @returns {void}
     */
    show: (eventOrElement: Event | Element) => void;
    willShow: boolean | undefined;
    /**
     * @param {Event} [_event]
     * @returns {void}
     */
    hide: (_event?: Event | undefined) => void;
    /**
     * @param {Event | KeyboardEvent} event
     */
    keyboardHide: (event: Event | KeyboardEvent) => void;
    /**
     * @param {Element} target
     * @returns {void}
     */
    computeTooltipPosition(target: Element): void;
    cleanup: (() => void) | undefined;
    /**
     * @return {HTMLElement | null | undefined}
     */
    get base(): HTMLElement | null | undefined;
}
import { BaseElement } from "../base-element.js";
